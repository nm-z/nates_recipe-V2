name: ML Pipeline CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install -r requirements.txt
    
    - name: Lint with flake8 (non-blocking)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run fast unit tests
      run: |
        pytest test_pipeline.py -v -x --tb=short -m "not slow"
    
    - name: Run integration tests (with timeout)
      run: |
        timeout 300 pytest test_pipeline.py -v --tb=short -m "slow" || echo "Integration tests timed out or failed"
      continue-on-error: true
    
    - name: Test import integrity
      run: |
        python -c "import battle_tested_optuna_playbook; print('✅ battle_tested_optuna_playbook imports successfully')"
        python -c "from battle_tested_optuna_playbook import BattleTestedOptimizer; print('✅ BattleTestedOptimizer imports successfully')"
    
    - name: Test CLI entry points
      run: |
        python -c "import battle_tested_optuna_playbook; print('✅ Main module callable:', callable(battle_tested_optuna_playbook.main))"
    
    - name: Validate data loading (if CSV files exist)
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from pathlib import Path
        
        # Check if any CSV files exist
        csv_files = list(Path('.').glob('*.csv'))
        if csv_files:
            print(f'✅ Found {len(csv_files)} CSV files')
            for csv_file in csv_files[:2]:  # Test first 2 files
                try:
                    df = pd.read_csv(csv_file, header=None, nrows=5)  # Just read first 5 rows
                    print(f'✅ {csv_file.name}: {df.shape} (sample)')
                except Exception as e:
                    print(f'⚠️  {csv_file.name}: {e}')
        else:
            print('ℹ️  No CSV files found (expected in test environment)')
        "
    
    - name: Memory and performance check
      run: |
        python -c "
        import psutil
        import numpy as np
        
        # Check available memory
        memory = psutil.virtual_memory()
        print(f'Available memory: {memory.available / (1024**3):.1f} GB')
        
        # Test basic numpy operations
        X = np.random.randn(1000, 100).astype(np.float32)
        y = np.random.randn(1000).astype(np.float32)
        print(f'✅ Created test arrays: X{X.shape}, y{y.shape}')
        print(f'Memory usage: {(X.nbytes + y.nbytes) / (1024**2):.1f} MB')
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff . || echo "Code formatting issues found (non-blocking)"
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "Import sorting issues found (non-blocking)"
      continue-on-error: true
    
    - name: Type checking with mypy (non-blocking)
      run: |
        mypy --ignore-missing-imports *.py || echo "Type checking issues found (non-blocking)"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json || echo "Security vulnerabilities found (non-blocking)"
      continue-on-error: true
    
    - name: Run bandit security linter
      run: |
        bandit -r . -f json || echo "Security issues found (non-blocking)"
      continue-on-error: true

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test basic imports on ${{ matrix.os }}
      run: |
        python -c "
        try:
            import battle_tested_optuna_playbook
            import numpy as np
            import pandas as pd
            import sklearn
            import optuna
            print('✅ All critical imports successful on ${{ matrix.os }}')
        except ImportError as e:
            print(f'❌ Import error on ${{ matrix.os }}: {e}')
            exit(1)
        "
    
    - name: Test numpy/sklearn compatibility
      run: |
        python -c "
        import numpy as np
        import sklearn
        from sklearn.ensemble import GradientBoostingRegressor
        from sklearn.model_selection import cross_val_score
        
        # Test basic ML operations
        X = np.random.randn(100, 10).astype(np.float32)
        y = np.random.randn(100).astype(np.float32)
        
        model = GradientBoostingRegressor(n_estimators=10, random_state=42)
        scores = cross_val_score(model, X, y, cv=3, scoring='r2')
        
        print(f'✅ ML operations successful on ${{ matrix.os }}')
        print(f'Cross-validation R² scores: {scores}')
        " 